{"version":3,"file":"FirebaseRecaptcha.js","sourceRoot":"","sources":["../src/FirebaseRecaptcha.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,uBAAuB,EAAoB,MAAM,oBAAoB,CAAC;AAC/E,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAU/C,SAAS,gBAAgB,CAAC,cAAgC,EAAE,eAAwB;IAClF,eAAe,GAAG,eAAe,IAAI,QAAQ,CAAC;IAC9C,OAAO;QACL,OAAO,EAAE,WAAW,cAAc,CAAC,UAAU,EAAE;QAC/C,IAAI,EAAE;;;;;;oDAM0C,eAAe;oDACf,eAAe;0DACT,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;eA2BzE;KACZ,CAAC;AACJ,CAAC;AAED,SAAS,sBAAsB,CAAC,cAAiC;IAC/D,IAAI,CAAC,cAAc,EAAE;QACnB,MAAM,IAAI,UAAU,CAClB,+BAA+B,EAC/B,qIAAqI,CACtI,CAAC;KACH;IACD,MAAM,EAAE,UAAU,EAAE,GAAG,cAAc,CAAC;IACtC,IAAI,CAAC,UAAU,EAAE;QACf,MAAM,IAAI,UAAU,CAClB,+BAA+B,EAC/B,qDAAqD,CACtD,CAAC;KACH;AACH,CAAC;AAED,MAAM,CAAC,OAAO,UAAU,iBAAiB,CAAC,KAAY;IACpD,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,UAAU,EAAE,GAAG,KAAK,CAAC;IAC5F,sBAAsB,CAAC,cAAc,CAAC,CAAC;IACvC,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,CAAC,KAAK,CACX,wJAAwJ,CACzJ,CAAC;QACF,OAAO,IAAI,CAAC;KACb;IACD,OAAO,CACL,oBAAC,OAAO,kBACN,iBAAiB,QACjB,gCAAgC,QAChC,eAAe,QACf,gBAAgB,EAAC,QAAQ,EACzB,MAAM,EAAE,gBAAgB,CAAC,cAAc,EAAE,eAAe,CAAC,EACzD,OAAO,EAAE,OAAO,EAChB,SAAS,EAAE,KAAK,CAAC,EAAE;YACjB,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAChD,QAAQ,IAAI,CAAC,IAAI,EAAE;gBACjB,KAAK,MAAM;oBACT,IAAI,MAAM,EAAE;wBACV,MAAM,EAAE,CAAC;qBACV;oBACD,MAAM;gBACR,KAAK,OAAO;oBACV,IAAI,OAAO,EAAE;wBACX,OAAO,EAAE,CAAC;qBACX;oBACD,MAAM;gBACR,KAAK,QAAQ;oBACX,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACrB,MAAM;aACT;QACH,CAAC,IACG,UAAU,EACd,CACH,CAAC;AACJ,CAAC;AAED,iBAAiB,CAAC,YAAY,GAAG;IAC/B,cAAc,EAAE,uBAAuB;CACxC,CAAC","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { DEFAULT_WEB_APP_OPTIONS, IFirebaseOptions } from 'expo-firebase-core';\nimport * as React from 'react';\nimport { WebView } from 'react-native-webview';\n\ninterface Props extends React.ComponentProps<typeof WebView> {\n  firebaseConfig?: IFirebaseOptions;\n  firebaseVersion?: string;\n  onLoad?: () => any;\n  onError?: () => any;\n  onVerify: (token: string) => any;\n}\n\nfunction getWebviewSource(firebaseConfig: IFirebaseOptions, firebaseVersion?: string) {\n  firebaseVersion = firebaseVersion || '7.12.0';\n  return {\n    baseUrl: `https://${firebaseConfig.authDomain}`,\n    html: `\n<!DOCTYPE html><html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"HandheldFriendly\" content=\"true\">\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-app.js\"></script>\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-auth.js\"></script>\n  <script type=\"text/javascript\">firebase.initializeApp(${JSON.stringify(firebaseConfig)});</script>\n</head>\n<body>\n  <div id=\"recaptcha-cont\" class=\"g-recaptcha\"></div>\n  <script>\n    function onLoad() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'load'\n      }));\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"recaptcha-cont\", {\n        size: \"normal\",\n        callback: function(response) {\n          window.ReactNativeWebView.postMessage(JSON.stringify({\n            type: 'verify',\n            token: response\n          }));\n        }\n      });\n      window.recaptchaVerifier.render();\n    }\n    function onError() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'error'\n      }));\n    }\n  </script>\n  <script src=\"https://www.google.com/recaptcha/api.js?onload=onLoad&render=explicit\" onerror=\"onError()\"></script>\n</body></html>`,\n  };\n}\n\nfunction validateFirebaseConfig(firebaseConfig?: IFirebaseOptions) {\n  if (!firebaseConfig) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n  }\n  const { authDomain } = firebaseConfig;\n  if (!authDomain) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing \"authDomain\" in firebase web configuration.`\n    );\n  }\n}\n\nexport default function FirebaseRecaptcha(props: Props) {\n  const { firebaseConfig, firebaseVersion, onVerify, onLoad, onError, ...otherProps } = props;\n  validateFirebaseConfig(firebaseConfig);\n  if (!firebaseConfig) {\n    console.error(\n      `FirebaseRecaptcha: Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n    return null;\n  }\n  return (\n    <WebView\n      javaScriptEnabled\n      automaticallyAdjustContentInsets\n      scalesPageToFit\n      mixedContentMode=\"always\"\n      source={getWebviewSource(firebaseConfig, firebaseVersion)}\n      onError={onError}\n      onMessage={event => {\n        const data = JSON.parse(event.nativeEvent.data);\n        switch (data.type) {\n          case 'load':\n            if (onLoad) {\n              onLoad();\n            }\n            break;\n          case 'error':\n            if (onError) {\n              onError();\n            }\n            break;\n          case 'verify':\n            onVerify(data.token);\n            break;\n        }\n      }}\n      {...otherProps}\n    />\n  );\n}\n\nFirebaseRecaptcha.defaultProps = {\n  firebaseConfig: DEFAULT_WEB_APP_OPTIONS,\n};\n"]}